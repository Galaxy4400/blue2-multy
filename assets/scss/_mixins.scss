@use 'sass:math';

// Pixels (PX) at interest (%)
@function prc($pxCurrent, $pxDefault) {
	$result: math.div($pxCurrent, $pxDefault) * 100%;
	@return $result;
}

// Pixels (Px) in Pixels (PX)
@function px($px) {
	$result: $px + px;
	@return $result;
}

// pixels (px) in (rem)
@function rem($px) {
	$result: math.div($px, 16) + rem;
	@return $result;
}

// Pixels (Px) in (Em)
@function em($pxCurrent, $pxDefault: 16) {
	$result: math.div($pxCurrent, $pxDefault) + em;
	@return $result;
}

// Sub -Quinto Font
@mixin font($font_name, $file_name, $weight, $style) {
	@font-face {
		font-family: $font_name;
		font-display: swap;
		src: url("../fonts/#{$file_name}.woff") format("woff"), url("../fonts/#{$file_name}.woff2") format("woff2");
		font-weight: #{$weight};
		font-style: #{$style};
	}
}

// Adaptive property
@mixin adaptiv-value($property, $startSize, $minSize, $type) {
	$addSize: $startSize - $minSize;
	@if $type==1 {
		// only if less container
		#{$property}: $startSize + px;
		@media (max-width: #{$maxWidthContainer + px}) {
			#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
		}
	} @else if $type==2 {
		// only if there is more container
		#{$property}: $startSize + px;
		@media (min-width: #{$maxWidthContainer + px}) {
			#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
		}
	} @else {
		// Always
		#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
	}
}